@{
    ViewData["Title"] = "Create job offer";
}

<div class="row page-box">
    <div class="col-sm-12">
        <h2>New Job Offer</h2>
        <form id="createJobOfferForm">
            <div class="form-group">
                <label for="JobTitle">Job Title</label>
                <input data-bind="value : jobTitle, valueUpdate: 'afterkeydown'" required class="form-control text-box single-line" id="JobTitle" name="JobTitle" type="text">
            </div>
            <div class="form-group">
                <label for="Companies">Company</label>
                <select data-bind="value: companyId, options: companies, optionsText: 'name', optionsValue: 'id'" class="form-control" id="Companies" name="Companies"></select>
            </div>
            <div class="form-group">
                <label for="Location">Location</label>
                <input data-bind="value : location, valueUpdate: 'afterkeydown'" class="form-control text-box single-line" id="Location" name="Location" type="text">
            </div>
            <div class="form-group">
                <label for="SalaryFrom">Salary</label>
                <div class="input-group">
                    <span class="input-group-addon">PLN</span>
                    <input data-bind="value : salaryFrom, valueUpdate: 'afterkeydown'" class="form-control text-box single-line" id="SalaryFrom" placeholder="From" name="SalaryFrom" type="text">
                    <span class="input-group-addon">.00</span>
                </div>
            </div>
            <div class="form-group">
                <label for="SalaryTo">Salary</label>
                <div class="input-group">
                    <span class="input-group-addon">PLN</span>
                    <input data-bind="value : salaryTo, valueUpdate: 'afterkeydown'" class="form-control text-box single-line" id="SalaryTo" placeholder="To" name="SalaryTo" type="text">
                    <span class="input-group-addon">.00</span>
                </div>
            </div>
            <div class="form-group">
                <label for="ValidUntil">Valid until</label>
                <div class="input-group">
                    <input data-bind="value: validUntil" class="form-control text-box single-line" id="ValidUntil" name="ValidUntil" type="date">
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
            <div class="form-group description">
                <label for="Description">Description</label>
                <textarea data-bind="value: description, valueUpdate: 'afterkeydown'" required minlength="50" class="form-control" data-val="true" data-val-minlength="Description must be at lest 50 characters" data-val-minlength-min="50" data-val-required="The Description field is required." id="Description" name="Description" placeholder="Enter description"></textarea>
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-primary" id="submitFormButton">Create</button>
            </div>
        </form>
    </div>
</div>

<div class="row panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title"><strong>Preview:</strong></h3>
    </div>
    <div class="panel-body" style="padding-top: 0; padding-right: 0">
        <h2 data-bind="text : jobTitle()||'Job title'"></h2>
        <div class="col-sm-8">
            @* Left section *@
            <div>
                <p data-bind="text: description"></p>
            </div>
        </div>

        <div class="col-sm-4">
            @* Right section *@
            <div class="offer-details">
                <div>
                    <label>Company:</label>
                    <span data-bind="text: companyDisplay"></span>
                </div>
                <div data-bind="visible: showLocation" style="display: none">
                    <label>Location:</label>
                    <span data-bind="text : location"></span>
                </div>
                <div data-bind="visible: salaryFrom " style="display: none">
                    <label>Salary from:</label>
                    <span data-bind="text : salaryFrom() + ' (PLN)'"></span>
                </div>
                <div data-bind="visible: salaryTo" style="display: none">
                    <label>Salary to:</label>
                    <span data-bind="text : salaryTo() + ' (PLN)'"></span>
                </div>
                <div>
                    <label>Created:</label>
                    <span data-bind="text : created()"></span>
                </div>
                <div data-bind="visible: showValidUntil" style="display: none">
                    <label>Valid:</label>
                    <span data-bind="text: validUntilDisplay"></span>
                </div>

                <a class="btn btn-primary">Apply</a>

            </div>
        </div>
    </div>

</div>

@section Scripts
    {
    <script src="~/lib/knockout/knockout.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation/dist/additional-methods.min.js"></script>

    <script>
        function reverseDate(date) { //Changes date form YYYY-MM-DD to DD-MM-YYYY
            if (date) {
                let parts = date.split("-");
                return parts[2] + "-" + parts[1] + "-" + parts[0];
            }
            return "";
        }

        function daysBetween(date1, date2) {
            //Get 1 day in milliseconds
            var one_day = 1000 * 60 * 60 * 24;

            // Convert both dates to milliseconds
            var date1_ms = date1.getTime();
            var date2_ms = date2.getTime();

            // Calculate the difference in milliseconds
            var difference_ms = date2_ms - date1_ms;

            // Convert back to days and return
            return Math.round(difference_ms / one_day);
        }

        function Company(id, name) {
            this.id = id;
            this.name = name;
        }

        function MyViewModel() {
            this.jobTitle = ko.observable();

            this.companies = ko.observableArray([]);
            this.companyId = ko.observable();
            this.companyDisplay = ko.computed(function () {
                let company = this.companies().find((c) => c.id == this.companyId());
                if (company)
                    return company.name;
                else
                    return "";
            },
                this);

            this.location = ko.observable();
            this.showLocation = ko.computed(function () {
                return (this.location()) ? true : false;
            },
                this);
            this.salaryFrom = ko.observable();

            this.showSalaryFrom = ko.computed(function () {
                return (this.salaryFrom()) ? true : false;
            },
                this);

            this.salaryTo = ko.observable();
            this.showSalaryTo = ko.computed(function () {
                return (this.salaryTo()) ? true : false;
            },
                this);

            this.created = ko.computed(function () {
                var today = new Date();
                var dd = today.getDate();
                var mm = today.getMonth() + 1; //January is 0!
                var yyyy = today.getFullYear();

                if (dd < 10) {
                    dd = '0' + dd;
                }

                if (mm < 10) {
                    mm = '0' + mm;
                }

                today = dd + '.' + mm + '.' + yyyy;
                return today;
            },
                this);

            this.validUntil = ko.observable();
            this.validUntilDisplay = ko.computed(function () {
                let date = reverseDate(this.validUntil());
                let dateParts = date.split("-");
                let dateObject = new Date(dateParts[2], parseInt(dateParts[1]) - 1, dateParts[0]);

                let daysLeft = daysBetween(new Date(), dateObject) + 1;

                return `For ${daysLeft} days (untill ${dateParts.join(".")})`;

            },
                this);
            this.showValidUntil = ko.computed(function () {
                return (this.validUntil() ? true : false);
            },
                this);

            this.description = ko.observable();
        }

        $(document).ready(function () {
            let model = new MyViewModel;

            ko.applyBindings(model);

            $.getJSON("/api/companies").done(function (data) {
                model.companies(data);
            });

            let form = $("#createJobOfferForm");
            form.validate();

            document.getElementById("submitFormButton").onclick = function () {
                if (form.valid()) {
                    let jobOfferDTO =
                    {
                        "jobTitle": model.jobTitle(),
                        "companyId": model.companyId(),
                        "salaryFrom": model.salaryFrom(),
                        "salaryTo": model.salaryTo(),
                        "location": model.location(),
                        "description": model.description(),
                        "validUntil": reverseDate(model.validUntil()),
                    };

                    $.ajax
                    ({
                        type: "POST",
                        url: '/api/offers',
                        contentType: "application/json",
                        dataType: 'json',
                        async: true,
                        data: JSON.stringify(jobOfferDTO),
                        success: function () {
                            window.location.href = "/JobOffer";
                        }
                    });
                }
            };
        });
    </script>
}